user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {



    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  65;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65000;
    types_hash_max_size 2048000;
    client_max_body_size 2048000M;
    client_body_timeout 60000s;
    client_header_timeout 60000s;
    send_timeout 60000s;
    proxy_connect_timeout 60000s;
    proxy_read_timeout 90000s;
    proxy_send_timeout 90000s;


    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

#	upstream proxy_gateway {
#        server tcl-gateway:8800;  # 替换为你的主机名和端口
#    }
    # 定义变量，兼容HTTP和WebSocket两种请求协议
    map $http_upgrade $connection_upgrade {
        default          keep-alive;  # 默认 keep-alive，表示HTTP协议。
        'websocket'      upgrade;     # 若是 websocket 请求，则升级协议 upgrade。
    }
    upstream showdocService {  
        server showdoc-service:80;
    }
    server {
        listen 8008;
#        server_name 127.0.0.1;  # 替换为你的域名或服务器的 IP 地址
		resolver kube-dns.kube-system.svc.cluster.local valid=300s;
        root /usr/share/nginx/html;  # 替换为应用构建后的静态文件目录
        index index.html;

        location / {
            try_files $uri $uri/ /index.html;
        }

         location /data/algorithm_tmp {
           alias /data/algorithm_tmp/;
          }

         location /data/algorithm_code {
          alias /data/algorithm_code/;
          add_header Content-Disposition "attachment;";
          add_header Content-Type "application/octet-stream";
         }

         location /data/dataList_package {
          alias  /data/dataList_package;
         }

        location /nas {
         alias /nas/;
        }
        location ^~/loki/ {
            # Loki访问地址
            proxy_pass http://loki.monitoring.svc.cluster.local:3100;
        }
        # 文档访问地址
        location ^~/docs/ {                          
            rewrite ^/docs/(.*) /$1 break;
            proxy_pass http://showdocService;                            
        }  

	

        location ^~/api/ {   #这里是用正则匹配的以api 开头的路径 通过 proxy_pass 属性代理到服务器上node项目运行地址
		   	#proxy_pass 10.120.200.35:30888;  #因为我node项目和前端项目是部署在同一台服务器上的，所以地址用的是127.0.0.1，如果是不同服务器可自行配置服务器端项目地址
		   	#通过后台gateway网关访问
		   	proxy_pass http://tcl-gateway:8800;
		   	#通过kong网关k8s内部端口地址访问
		   	#proxy_pass http://kong.kong:8000/tcl-gateway;
		}
		
		set $ws "pipelinerunner-ws";
		location /pipelinerunner/ws {
           proxy_pass http://$ws.tcl.svc.cluster.local:6788; # 转发到后端接口
            proxy_read_timeout 7200s; # 设置超时时间2小时
            proxy_http_version 1.1;
            proxy_set_header Host $host; # 这个配置不要漏了，必须要
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
       }
    }
}
